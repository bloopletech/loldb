!!!
%html
  %head
    %meta{charset: 'utf-8'}
    %title LOL League Schedule

    %meta{name: 'HandheldFriendly', content: 'true'}
    %meta{name: 'viewport', content: 'width=device-width, height=device-height, user-scalable=no'}

    :css
      #{data.flat_map { |(league_name, league)| league['teams'].map { |(name, team)| ".#{league_name.gsub(' ', '-')}-#{name} { background-image: url(\"http://am-a.akamaihd.net/image/?f=#{team['logo']}&resize=50:50\"); }" } }.join("\n")}

      * {
        box-sizing: border-box;
      }

      body {
        font-family: 'Open Sans', Helvetica, Arial, sans-serif;
        line-height: 1.4;
        margin: 0;
        padding: 8px;
      }

      html, body, #page-wrapper, #leagues-wrapper, .leagues {
        height: 100%;
      }

      #menu {
        height: 50px;
      }

      #leagues-wrapper {
        padding-top: 50px;
        margin-top: -50px;
      }

      #leagues-wrapper:after {
        content: " ";
        display: table;
        clear: both;
      }

      .leagues {
        display: flex;
        flex-direction: column;
        float: left;
        margin-right: 4px;
        margin-bottom: 20px;
        border: 1px solid #888;
      }

      #leagues-wrapper .leagues:last-child {
        margin-right: 0;
      }

      .matches {
        flex: 2;
        overflow: auto;
        width: 194px;
      }

      .header, .match {
        border-bottom: 2px solid #ddd;
        padding: 10px;
      }

      .header {
        flex: 0 1 auto;
        min-height: 50px;
        font-size: 30px;
        font-weight: bold;
        line-height: 50px;
        text-align: center;
        border-bottom: 2px solid #888;
      }

      .match {
        background-color: #111;
        color: #fff;
        padding: 14px 6px;
      }

      .matches .match:last-child {
        border-bottom: none;
      }

      .match.past {
        color: #888;
      }

      .match.current {
        /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#45484d+0,000000+100 */
        background: #45484d;
        background: linear-gradient(135deg,  #45484d 0%,#000000 100%);
      }

      .match.current .time {
        font-weight: bold;
      }

      .time {
        font-size: 18px;
        text-align: center;
        padding-bottom: 10px;
      }

      .vs {
        font-size: 20px;
        white-space: nowrap;
        text-align: center;
      }

      .vs .side {
        display: inline-block;
        vertical-align: middle;
        font-weight: bold;
      }

      .vs .side:first-child {
        text-align: right;
      }

      .vs .middle {
        display: inline-block;
        width: 18px;
        text-align: center;
        font-size: 14px;
        vertical-align: middle;
      }

      .logo {
        display: inline-block;
        background-size: cover;
        width: 26px;
        height: 26px;
        vertical-align: middle;
      }

    :javascript
      function parseTimes() {
        var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var now = new Date();

        var times = document.querySelectorAll(".time");
        for(var i = 0; i < times.length; i++) {
          var time = new Date(times[i].innerHTML);

          var ampm = (time.getHours() > 12) ? 'PM' : 'AM';
          var hours = time.getHours() % 12;
          if(hours == 0) hours = 12;

          if(time.toDateString() == now.toDateString())
            var parts = ['Today', hours + ampm];
          else
            var parts = [days[time.getDay()], time.getDate(), months[time.getMonth()], hours + ampm];
          times[i].innerHTML = parts.join(" ");

          var earlyStart = new Date(time.getTime());
          earlyStart.setHours(earlyStart.getHours() - 3);

          var scheduledEnd = new Date(time.getTime());
          scheduledEnd.setHours(scheduledEnd.getHours() + 3);

          var matchElement = times[i].parentNode;
          if(scheduledEnd.getTime() < now.getTime()) matchElement.classList.add("past");
          if((now.getTime() >= earlyStart.getTime()) && (now.getTime() <= scheduledEnd.getTime())) matchElement.classList.add("current");
          if(time.toDateString() == now.toDateString()) matchElement.classList.add("today");
        }
      }

      function togglePastMatches(show) {
        var pastMatches = document.querySelectorAll(".past");
        for(var i = 0; i < pastMatches.length; i++) {
          pastMatches[i].style.display = show ? 'block' : 'none';
        }
      }

      document.addEventListener("DOMContentLoaded", function(event) {
        parseTimes();
        togglePastMatches(false);
        document.getElementById('show-past-matches').addEventListener("click", function() {
          togglePastMatches(document.getElementById('show-past-matches').checked);
        });
      });
  %body
    #page-wrapper
      #menu
        %input#show-past-matches{type: 'checkbox'}
        %label{for: 'show-past-matches'} Show past matches
      #leagues-wrapper
        - data.each_pair do |league_name, tournament|
          .leagues
            .header= league_name
            .matches
              - tournament['matches'].each do |match|
                .match
                  .time= match['time']
                  .vs<
                    %span.side<
                      %span.logo{class: "#{league_name.gsub(' ', '-')}-#{match['vs'].first}"}
                      = match['vs'].first
                    %span.middle< v
                    %span.side<
                      %span.logo{class: "#{league_name.gsub(' ', '-')}-#{match['vs'].last}"}
                      = match['vs'].last
