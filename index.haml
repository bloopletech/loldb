!!!
%html
  %head
    %meta{charset: 'utf-8'}
    %title LOL League Schedule

    %meta{name: 'HandheldFriendly', content: 'true'}
    %meta{name: 'viewport', content: 'width=device-width, height=device-height, user-scalable=no'}

    :css
      #{data.flat_map { |(league_name, league)| league['teams'].map { |(name, team)| ".#{league_name.gsub(' ', '-')}-#{name} { background-image: url(\"http://am-a.akamaihd.net/image/?f=#{team['logo']}&resize=50:50\"); }" } }.join("\n")}

      * {
        box-sizing: border-box;
      }

      .clearfix:after {
        content: " ";
        display: table;
        clear: both;
      }

      body {
        margin: 0;
        padding: 8px;
      }

      body, button, input {
        font-family: 'Open Sans', Helvetica, Arial, sans-serif;
        line-height: 1.4;
      }

      html, body, #page-wrapper, #leagues-wrapper, .leagues {
        height: 100%;
      }

      #menu {
        height: 80px;
      }

      #menu button {
        margin-right: 10px;
        font-size: 18px;
        margin-bottom: 10px;
      }

      #menu input {
        font-size: 18px;
      }

      #leagues-wrapper {
        padding-top: 80px;
        margin-top: -80px;
      }

      .leagues {
        display: flex;
        flex-direction: column;
        float: left;
        margin-right: 4px;
        margin-bottom: 8px;
        border: 1px solid #999;
      }

      #leagues-wrapper .leagues:last-child {
        margin-right: 0;
      }

      .matches {
        flex: 2;
        overflow: auto;
        width: 194px;
      }

      .header, .match {
        border-bottom: 2px solid #ddd;
        padding: 10px;
      }

      .header {
        flex: 0 1 auto;
        min-height: 50px;
        font-size: 30px;
        font-weight: bold;
        line-height: 50px;
        text-align: center;
        border-bottom: 2px solid #888;
      }

      .matches {
        background-color: #111;
        color: #fff;
      }

      .match {
        padding: 16px 6px;
        display: none;
      }

      .matches .match:last-child {
        border-bottom: none;
      }

      body.select-current-week .match.current-week {
        display: block;
      }

      body.select-current-week #select-current-week {
        font-weight: bold;
      }

      body.select-future .match.future {
        display: block;
      }

      body.select-future #select-future {
        font-weight: bold;
      }

      body.select-all .match {
        display: block;
      }

      body.select-all #select-all {
        font-weight: bold;
      }

      body.filter .match:not(.filter-match) {
        display: none;
      }

      .match.past .time {
        color: #888;
      }

      .match.current {
        /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#45484d+0,000000+100 */
        background: #45484d;
        background: linear-gradient(135deg,  #45484d 0%,#000000 100%);
      }

      .match.current .time {
        font-weight: bold;
      }

      .match.filter-no-match {
        display: none !important;
      }

      .match.games {
        cursor: pointer;
      }

      .match.games .side, .match.games .middle {
        text-decoration: underline;
      }

      .time {
        font-size: 18px;
        text-align: center;
        padding-bottom: 10px;
      }

      .vs {
        font-size: 20px;
        white-space: nowrap;
        text-align: center;
      }

      .vs .side {
        display: inline-block;
        vertical-align: middle;
        font-weight: bold;
      }

      .vs .side:first-child {
        text-align: right;
      }

      .vs .middle {
        display: inline-block;
        width: 18px;
        text-align: center;
        font-size: 14px;
        vertical-align: middle;
      }

      .logo {
        display: inline-block;
        background-size: cover;
        width: 26px;
        height: 26px;
        vertical-align: middle;
      }

      #modal {
        position: fixed;
        top: 50%;
        left: 50%;
        width: 250px;
        height: 200px;
        margin-left: -125px;
        margin-top: -100px;
        border: 1px solid #000000;
        background-color: #ffffff;
        padding: 16px;
        display: none;
      }

      #modal-close {
        float: right;
        margin-bottom: 10px;
      }

      #modal-body {
        text-align: center;
        font-size: 18px;
      }

      #modal-body:before {
        content: " ";
        display: table;
        clear: both;
      }

      #modal a {
        display: block;
      }

    :javascript
      #{File.read('moment.min.js')}

    :javascript
      function parseTimes() {
        var now = moment();

        var times = document.querySelectorAll(".time");
        for(var i = 0; i < times.length; i++) {
          var time = moment(times[i].getAttribute('value'));

          var parts = [];
          parts.push(time.isSame(now, 'day') ? '[Today] ' : 'ddd D MMM ');
          parts.push((time.minutes() == 0) ? 'hA' : 'h:mmA');
          times[i].innerHTML = time.format(parts.join(''));

          var earlyStart = time.subtract(3, 'hours');
          var scheduledEnd = time.add(3, 'hours');

          var matchElement = times[i].parentNode;
          if(scheduledEnd.isBefore(now)) matchElement.classList.add("past");
          if(now.isSameOrAfter(earlyStart) && now.isSameOrBefore(scheduledEnd)) matchElement.classList.add("current");
          if(time.isSame(now, 'day')) matchElement.classList.add("today");
          if(time.isSame(now, 'isoweek')) matchElement.classList.add("current-week");
          if(earlyStart.isSameOrAfter(now)) matchElement.classList.add("future");
        }
      }

      function selectButton() {
        document.body.classList.remove("select-future");
        document.body.classList.remove("select-all");
        document.body.classList.remove("select-current-week");
        document.body.classList.add(this.id);

        setQueryParams();
      }

      function filterMatches() {
        document.body.classList.remove("filter");

        var query = document.getElementById('filter').value;
        if(query != "") {
          document.body.classList.add("filter");

          var matches = document.querySelectorAll(".match");
          for(var i = 0; i < matches.length; i++) matches[i].classList.remove("filter-match");

          var terms = query.toUpperCase().split(/[ ,]/);
          for(var i = 0; i < terms.length; i++) {
            var matching = document.querySelectorAll(".match[class*='" + terms[i] + "']");
            for(var j = 0; j < matching.length; j++) matching[j].classList.add("filter-match");
          }
        }

        setQueryParams();
      }

      function showGames(videoElement) {
        var urls = JSON.parse(videoElement.getAttribute('urls'));
        console.log('urls: ', urls);
        var modal = document.getElementById('modal');
        var modalBody = document.getElementById('modal-body');
        modalBody.innerHTML = '';

        for(var i = 0; i < urls.length; i++) {
          var element = document.createElement('a');
          element.href = urls[i];
          element.innerHTML = 'Game ' + (i + 1);
          element.target = '_blank';
          modalBody.appendChild(element);
        }

        modal.style.display = 'block';
      }

      /* from https://css-tricks.com/snippets/javascript/get-url-variables/ */
      function getQueryParams()
      {
        var params = {};
        var query = window.location.hash.substring(1);
        var vars = query.split("&");
        for(var i = 0; i < vars.length; i++) {
          var pair = vars[i].split("=");
          params[pair[0]] = pair[1];
        }
        return params;
      }

      function setQueryParams() {
        var classes = document.body.classList;
        var select = '';
        for(var i = 0; i < classes.length; i++) {
          if(classes[i].match(/^select-/g)) {
            select = classes[i];
            break;
          }
        }

        var params = {
          filter: document.getElementById('filter').value,
          select: select
        }

        window.location.hash = "#" + Object.keys(params).map(k => k + '=' + params[k]).join('&');
      }

      document.addEventListener("DOMContentLoaded", function(event) {
        parseTimes();
        window.setInterval(parseTimes, 60000);

        var params = getQueryParams();

        document.getElementById('select-current-week').addEventListener("click", selectButton);
        document.getElementById('select-future').addEventListener("click", selectButton);
        document.getElementById('select-all').addEventListener("click", selectButton);
        document.getElementById('filter').addEventListener("keyup", filterMatches);

        document.body.addEventListener('click', function(event) {
          if(event.target.matches('.match.games, .match.games *')) {
            event.stopPropagation();
            var target = event.target;
            while(!target.matches('.match.games')) target = target.parentNode;
            showGames(target);
          }
        });

        document.getElementById('modal-close').addEventListener('click', function() {
          document.getElementById('modal').style.display = 'none';
        });

        if(params['filter']) {
          document.getElementById('filter').value = params['filter'];
          filterMatches();
        }

        if(params['select']) document.getElementById(params['select']).click();
        else document.getElementById('select-current-week').click();
      });
  %body
    #page-wrapper
      #menu.clearfix
        %button#select-current-week
          Current Week
        %button#select-future
          All Future
        %button#select-all
          All
        %input#filter{type: 'text', placeholder: 'Filter matches'}

      #leagues-wrapper.clearfix
        - data.each_pair do |league_name, tournament|
          .leagues
            .header= league_name
            .matches
              - tournament['matches'].each do |match|
                .match{class: "#{'games' unless match['game_urls'].empty?} #{match['vs'].join(' ')}", urls: match['game_urls'].to_json}
                  .time{value: match['time']}
                  .vs<
                    %span.side<
                      %span.logo{class: "#{league_name.gsub(' ', '-')}-#{match['vs'].first}"}
                      = match['vs'].first
                    %span.middle< v
                    %span.side<
                      %span.logo{class: "#{league_name.gsub(' ', '-')}-#{match['vs'].last}"}
                      = match['vs'].last
    #modal
      %button#modal-close Close
      #modal-body
